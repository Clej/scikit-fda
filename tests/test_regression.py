import unittest

import numpy as np
from scipy.integrate import cumtrapz

from skfda.datasets import make_gaussian, make_gaussian_process
from skfda.misc import covariances
from skfda.misc.covariances import Gaussian
from skfda.misc.operators import LinearDifferentialOperator
from skfda.misc.regularization import TikhonovRegularization
from skfda.ml.regression import HistoricalLinearRegression, LinearRegression
from skfda.representation.basis import BSpline, FDataBasis, Fourier, Monomial
from skfda.representation.grid import FDataGrid


class TestScalarLinearRegression(unittest.TestCase):

    def test_regression_single_explanatory(self):

        x_basis = Monomial(n_basis=7)
        x_fd = FDataBasis(x_basis, np.identity(7))

        beta_basis = Fourier(n_basis=5)
        beta_fd = FDataBasis(beta_basis, [1, 1, 1, 1, 1])
        y = [0.9999999999999993,
             0.162381381441085,
             0.08527083481359901,
             0.08519946930844623,
             0.09532291032042489,
             0.10550022969639987,
             0.11382675064746171]

        scalar = LinearRegression(coef_basis=[beta_basis])
        scalar.fit(x_fd, y)
        np.testing.assert_allclose(scalar.coef_[0].coefficients,
                                   beta_fd.coefficients)
        np.testing.assert_allclose(scalar.intercept_,
                                   0.0, atol=1e-6)

        y_pred = scalar.predict(x_fd)
        np.testing.assert_allclose(y_pred, y)

        scalar = LinearRegression(coef_basis=[beta_basis],
                                  fit_intercept=False)
        scalar.fit(x_fd, y)
        np.testing.assert_allclose(scalar.coef_[0].coefficients,
                                   beta_fd.coefficients)
        np.testing.assert_equal(scalar.intercept_,
                                0.0)

        y_pred = scalar.predict(x_fd)
        np.testing.assert_allclose(y_pred, y)

    def test_regression_multiple_explanatory(self):
        y = [1, 2, 3, 4, 5, 6, 7]

        X = FDataBasis(Monomial(n_basis=7), np.identity(7))

        beta1 = BSpline(domain_range=(0, 1), n_basis=5)

        scalar = LinearRegression(coef_basis=[beta1])

        scalar.fit(X, y)

        np.testing.assert_allclose(scalar.intercept_.round(4),
                                   np.array([32.65]), rtol=1e-3)

        np.testing.assert_allclose(
            scalar.coef_[0].coefficients.round(4),
            np.array([[-28.6443,
                       80.3996,
                       -188.587,
                       236.5832,
                       -481.3449]]), rtol=1e-3)

        y_pred = scalar.predict(X)
        np.testing.assert_allclose(y_pred, y, atol=0.01)

    def test_regression_mixed(self):

        multivariate = np.array([[0, 0], [2, 7], [1, 7], [3, 9],
                                 [4, 16], [2, 14], [3, 5]])

        X = [multivariate,
             FDataBasis(Monomial(n_basis=3), [[1, 0, 0], [0, 1, 0], [0, 0, 1],
                                              [1, 0, 1], [1, 0, 0], [0, 1, 0],
                                              [0, 0, 1]])]

        # y = 2 + sum([3, 1] * array) + int(3 * function)
        intercept = 2
        coefs_multivariate = np.array([3, 1])
        coefs_functions = FDataBasis(
            Monomial(n_basis=3), [[3, 0, 0]])
        y_integral = np.array([3, 3 / 2, 1, 4, 3, 3 / 2, 1])
        y_sum = multivariate @ coefs_multivariate
        y = 2 + y_sum + y_integral

        scalar = LinearRegression()
        scalar.fit(X, y)

        np.testing.assert_allclose(scalar.intercept_,
                                   intercept, atol=0.01)

        np.testing.assert_allclose(
            scalar.coef_[0],
            coefs_multivariate, atol=0.01)

        np.testing.assert_allclose(
            scalar.coef_[1].coefficients,
            coefs_functions.coefficients, atol=0.01)

        y_pred = scalar.predict(X)
        np.testing.assert_allclose(y_pred, y, atol=0.01)

    def test_regression_mixed_regularization(self):

        multivariate = np.array([[0, 0], [2, 7], [1, 7], [3, 9],
                                 [4, 16], [2, 14], [3, 5]])

        X = [multivariate,
             FDataBasis(Monomial(n_basis=3), [[1, 0, 0], [0, 1, 0], [0, 0, 1],
                                              [1, 0, 1], [1, 0, 0], [0, 1, 0],
                                              [0, 0, 1]])]

        # y = 2 + sum([3, 1] * array) + int(3 * function)
        intercept = 2
        coefs_multivariate = np.array([3, 1])
        y_integral = np.array([3, 3 / 2, 1, 4, 3, 3 / 2, 1])
        y_sum = multivariate @ coefs_multivariate
        y = 2 + y_sum + y_integral

        scalar = LinearRegression(
            regularization=[TikhonovRegularization(lambda x: x),
                            TikhonovRegularization(
                                LinearDifferentialOperator(2))])
        scalar.fit(X, y)

        np.testing.assert_allclose(scalar.intercept_,
                                   intercept, atol=0.01)

        np.testing.assert_allclose(
            scalar.coef_[0],
            [2.536739, 1.072186], atol=0.01)

        np.testing.assert_allclose(
            scalar.coef_[1].coefficients,
            [[2.125676, 2.450782, 5.808745e-4]], atol=0.01)

        y_pred = scalar.predict(X)
        np.testing.assert_allclose(
            y_pred,
            [5.349035, 16.456464, 13.361185, 23.930295,
                32.650965, 23.961766, 16.29029],
            atol=0.01)

    def test_regression_regularization(self):

        x_basis = Monomial(n_basis=7)
        x_fd = FDataBasis(x_basis, np.identity(7))

        beta_basis = Fourier(n_basis=5)
        beta_fd = FDataBasis(beta_basis, [1.0403, 0, 0, 0, 0])
        y = [1.0000684777229512,
             0.1623672257830915,
             0.08521053851548224,
             0.08514200869281137,
             0.09529138749665378,
             0.10549625973303875,
             0.11384314859153018]

        y_pred_compare = [0.890341,
                          0.370162,
                          0.196773,
                          0.110079,
                          0.058063,
                          0.023385,
                          -0.001384]

        scalar = LinearRegression(
            coef_basis=[beta_basis],
            regularization=TikhonovRegularization(
                LinearDifferentialOperator(2)))
        scalar.fit(x_fd, y)
        np.testing.assert_allclose(scalar.coef_[0].coefficients,
                                   beta_fd.coefficients, atol=1e-3)
        np.testing.assert_allclose(scalar.intercept_,
                                   -0.15, atol=1e-4)

        y_pred = scalar.predict(x_fd)
        np.testing.assert_allclose(y_pred, y_pred_compare, atol=1e-4)

        x_basis = Monomial(n_basis=3)
        x_fd = FDataBasis(x_basis, [[1, 0, 0],
                                    [0, 1, 0],
                                    [0, 0, 1],
                                    [2, 0, 1]])

        beta_fd = FDataBasis(x_basis, [3, 2, 1])
        y = [1 + 13 / 3, 1 + 29 / 12, 1 + 17 / 10, 1 + 311 / 30]

        # Non regularized
        scalar = LinearRegression()
        scalar.fit(x_fd, y)
        np.testing.assert_allclose(scalar.coef_[0].coefficients,
                                   beta_fd.coefficients)
        np.testing.assert_allclose(scalar.intercept_,
                                   1)

        y_pred = scalar.predict(x_fd)
        np.testing.assert_allclose(y_pred, y)

        # Regularized
        beta_fd_reg = FDataBasis(x_basis, [2.812, 3.043, 0])
        y_reg = [5.333, 3.419, 2.697, 11.366]

        scalar_reg = LinearRegression(
            regularization=TikhonovRegularization(
                LinearDifferentialOperator(2)))
        scalar_reg.fit(x_fd, y)
        np.testing.assert_allclose(scalar_reg.coef_[0].coefficients,
                                   beta_fd_reg.coefficients, atol=0.001)
        np.testing.assert_allclose(scalar_reg.intercept_,
                                   0.998, atol=0.001)

        y_pred = scalar_reg.predict(x_fd)
        np.testing.assert_allclose(y_pred, y_reg, atol=0.001)

    def test_error_X_not_FData(self):
        """Tests that at least one of the explanatory variables
        is an FData object. """

        x_fd = np.identity(7)
        y = np.zeros(7)

        scalar = LinearRegression(coef_basis=[Fourier(n_basis=5)])

        with np.testing.assert_warns(UserWarning):
            scalar.fit([x_fd], y)

    def test_error_y_is_FData(self):
        """Tests that none of the explained variables is an FData object
        """
        x_fd = FDataBasis(Monomial(n_basis=7), np.identity(7))
        y = list(FDataBasis(Monomial(n_basis=7), np.identity(7)))

        scalar = LinearRegression(coef_basis=[Fourier(n_basis=5)])

        with np.testing.assert_raises(ValueError):
            scalar.fit([x_fd], y)

    def test_error_X_beta_len_distinct(self):
        """ Test that the number of beta bases and explanatory variables
        are not different """

        x_fd = FDataBasis(Monomial(n_basis=7), np.identity(7))
        y = [1 for _ in range(7)]
        beta = Fourier(n_basis=5)

        scalar = LinearRegression(coef_basis=[beta])
        with np.testing.assert_raises(ValueError):
            scalar.fit([x_fd, x_fd], y)

        scalar = LinearRegression(coef_basis=[beta, beta])
        with np.testing.assert_raises(ValueError):
            scalar.fit([x_fd], y)

    def test_error_y_X_samples_different(self):
        """ Test that the number of response samples and explanatory samples
        are not different """

        x_fd = FDataBasis(Monomial(n_basis=7), np.identity(7))
        y = [1 for _ in range(8)]
        beta = Fourier(n_basis=5)

        scalar = LinearRegression(coef_basis=[beta])
        with np.testing.assert_raises(ValueError):
            scalar.fit([x_fd], y)

        x_fd = FDataBasis(Monomial(n_basis=8), np.identity(8))
        y = [1 for _ in range(7)]
        beta = Fourier(n_basis=5)

        scalar = LinearRegression(coef_basis=[beta])
        with np.testing.assert_raises(ValueError):
            scalar.fit([x_fd], y)

    def test_error_beta_not_basis(self):
        """ Test that all beta are Basis objects. """

        x_fd = FDataBasis(Monomial(n_basis=7), np.identity(7))
        y = [1 for _ in range(7)]
        beta = FDataBasis(Monomial(n_basis=7), np.identity(7))

        scalar = LinearRegression(coef_basis=[beta])
        with np.testing.assert_raises(TypeError):
            scalar.fit([x_fd], y)

    def test_error_weights_lenght(self):
        """ Test that the number of weights is equal to the
        number of samples """

        x_fd = FDataBasis(Monomial(n_basis=7), np.identity(7))
        y = [1 for _ in range(7)]
        weights = [1 for _ in range(8)]
        beta = Monomial(n_basis=7)

        scalar = LinearRegression(coef_basis=[beta])
        with np.testing.assert_raises(ValueError):
            scalar.fit([x_fd], y, weights)

    def test_error_weights_negative(self):
        """ Test that none of the weights are negative. """

        x_fd = FDataBasis(Monomial(n_basis=7), np.identity(7))
        y = [1 for _ in range(7)]
        weights = [-1 for _ in range(7)]
        beta = Monomial(n_basis=7)

        scalar = LinearRegression(coef_basis=[beta])
        with np.testing.assert_raises(ValueError):
            scalar.fit([x_fd], y, weights)


class TestHistoricalLinearRegression(unittest.TestCase):
    """Tests for historical linear regression."""

    def setUp(self) -> None:
        """Generate data according to the model."""
        self.random = np.random.RandomState(1)

        self.n_samples = 50
        self.n_features = 20
        self.intercept = make_gaussian_process(
            n_samples=1,
            n_features=self.n_features,
            cov=Gaussian(length_scale=0.4),
            random_state=self.random,
        )

        np.testing.assert_almost_equal(
            self.intercept.data_matrix[..., 0],
            np.array([[
                -0.44419728, -0.56909477, -0.68783434, -0.80186766, -0.91540068,
                -1.03397827, -1.16239266, -1.30246822, -1.45134619, -1.60079727,
                -1.73785278, -1.84672707, -1.9116814, -1.92023053, -1.86597929,
                -1.75042757, -1.58329321, -1.38122881, -1.16517441, -0.95690171,
            ]])
        )

        self.X = make_gaussian_process(
            n_samples=self.n_samples,
            n_features=self.n_features,
            cov=Gaussian(length_scale=0.4),
            random_state=self.random,
        )
        self.coefficients = make_gaussian(
            n_samples=1,
            grid_points=[np.linspace(0, 1, self.n_features)] * 2,
            cov=Gaussian(length_scale=1),
            random_state=self.random,
        )

        covariance = covariances._execute_covariance(
            Gaussian(length_scale=1), np.linspace(0, 1, self.n_features), np.linspace(0, 1, self.n_features))

        kk = np.linalg.svd(covariance)
        np.testing.assert_almost_equal(
            kk[0],
            np.array([[-2.07745796e-01, -3.53499224e-01, -4.24704118e-01,
                       4.38526581e-01, 4.10421088e-01, -3.54696800e-01,
                       -2.85306097e-01, 2.14317960e-01, 1.50480799e-01,
                       -9.72724699e-02, 5.48931421e-02, 2.77218995e-02,
                       -2.90447444e-03, -8.63720916e-03, 1.47985877e-02,
                       -6.38392730e-03, 3.19088026e-04, -2.31445976e-03,
                       -2.35200464e-02, 2.87085300e-02],
                      [-2.12536586e-01, -3.23842468e-01, -3.02798180e-01,
                       1.78544537e-01, -1.05573598e-03, 1.83142307e-01,
                       3.23551473e-01, -3.97680953e-01, -4.03394435e-01,
                       3.49349496e-01, -2.47364593e-01, -1.62706573e-01,
                       -2.83079777e-03, 7.75399053e-02, -7.82703189e-02,
                       2.34672884e-02, -3.68317337e-03, 3.93668278e-03,
                       1.21931948e-01, -1.73155334e-01],
                      [-2.16887425e-01, -2.91801208e-01, -1.89267880e-01,
                       -1.80827215e-02, -2.19966326e-01, 3.20250225e-01,
                       2.77298225e-01, -1.15530338e-01, 9.53154240e-02,
                       -2.68609660e-01, 2.98125851e-01, 3.50326598e-01,
                       9.00339737e-02, -2.63133363e-01, 1.38529161e-01,
                       -4.31304302e-02, 2.53294158e-02, 9.78557308e-03,
                       -2.09207371e-01, 3.93358354e-01],
                      [-2.20767163e-01, -2.57579395e-01, -8.58072050e-02,
                       -1.54324281e-01, -2.90281478e-01, 2.30663263e-01,
                       1.76438603e-02, 2.10689264e-01, 3.15510651e-01,
                       -2.38136937e-01, 1.50956053e-01, -2.85577754e-01,
                       -2.94853489e-01, 3.99842395e-01, -3.37528337e-02,
                       1.47721647e-01, -9.97750355e-02, 7.44328024e-04,
                       6.67073910e-02, -3.56073311e-01],
                      [-2.24147659e-01, -2.21408067e-01, 6.02231879e-03,
                       -2.34681396e-01, -2.55173841e-01, 4.99470070e-02,
                       -2.02045126e-01, 2.87033345e-01, 1.36398452e-01,
                       1.20139691e-01, -3.85416779e-01, -4.40485786e-03,
                       4.14894610e-01, -1.60147670e-01, -1.83390205e-01,
                       -3.86382356e-01, 2.20367250e-01, -1.51073821e-01,
                       1.43736598e-01, -2.11892050e-02],
                      [-2.27004115e-01, -1.83542799e-01, 8.48212284e-02,
                       -2.65079765e-01, -1.55333564e-01, -1.25459870e-01,
                       -2.75613302e-01, 1.35724448e-01, -1.49214888e-01,
                       2.65575744e-01, -1.58539640e-01, -1.87699105e-02,
                       -2.55533556e-01, -3.00732826e-01, 2.36617690e-01,
                       3.33864157e-01, -2.61895075e-01, 4.00904477e-01,
                       -1.86367907e-02, 1.78696543e-01],
                      [-2.29315378e-01, -1.44260722e-01, 1.49378970e-01,
                       -2.52723472e-01, -2.73898866e-02, -2.36707090e-01,
                       -2.00638882e-01, -9.19522570e-02, -2.74885183e-01,
                       1.51099303e-01, 2.39776405e-01, 3.04597673e-01,
                       1.86320951e-02, 3.99089908e-01, -2.39067808e-01,
                       2.29630093e-01, 1.24076421e-01, -3.99092262e-01,
                       -1.65297964e-01, 1.21518710e-01],
                      [-2.31064204e-01, -1.03857162e-01, 1.98697349e-01,
                       -2.05914208e-01, 9.75040092e-02, -2.58925295e-01,
                       -3.59443114e-02, -2.44719467e-01, -1.69553167e-01,
                       -1.26621797e-01, 3.21190077e-01, -2.94533855e-01,
                       7.93326575e-02, -1.31451985e-01, 4.54774940e-01,
                       -3.94313255e-01, 7.96670732e-02, -2.03962509e-02,
                       -8.55100650e-02, -2.85599119e-01],
                      [-2.32237467e-01, -6.26419518e-02, 2.32010013e-01,
                       -1.33840444e-01, 1.94871188e-01, -1.95773016e-01,
                       1.36754789e-01, -2.43059362e-01, 6.03941812e-02,
                       -3.19348016e-01, -6.13381573e-02, 2.13481419e-01,
                       -1.50059406e-01, -3.59484931e-02, -4.50925459e-01,
                       -1.90977474e-01, -2.41653937e-01, 2.62422246e-01,
                       4.11692342e-01, 3.13373010e-02],
                      [-2.32826323e-01, -2.09354746e-02, 2.48797507e-01,
                       -4.63422021e-02, 2.47852118e-01, -7.24487156e-02,
                       2.44283673e-01, -9.97691246e-02, 2.38867772e-01,
                       -1.53579703e-01, -2.65935064e-01, -3.27866179e-01,
                       1.97443808e-01, 4.49207015e-02, -2.95001149e-02,
                       4.00764862e-01, 4.16592291e-01, 1.43047831e-01,
                       -2.36535841e-01, 1.83548419e-01],
                      [-2.32826323e-01, 2.09354746e-02, 2.48797507e-01,
                       4.63422021e-02, 2.47852118e-01, 7.24487156e-02,
                       2.44283659e-01, 9.97723947e-02, 2.38948800e-01,
                       1.69312090e-01, -2.77706716e-01, 1.90938295e-01,
                       -4.25421400e-02, -4.20876679e-03, 1.81273932e-01,
                       -7.63459762e-02, -5.05022021e-01, -3.69985498e-01,
                       -3.05044017e-01, -1.41953737e-01],
                      [-2.32237467e-01, 6.26419518e-02, 2.32010013e-01,
                       1.33840444e-01, 1.94871188e-01, 1.95773016e-01,
                       1.36754789e-01, 2.43058569e-01, 6.06388818e-02,
                       3.03285458e-01, 2.41002897e-01, 3.31393398e-02,
                       -2.80376542e-01, -1.01206815e-01, 1.73106262e-01,
                       1.26376371e-02, 3.43527029e-01, -1.76747497e-01,
                       5.23487628e-01, 1.38599341e-01],
                      [-2.31064204e-01, 1.03857162e-01, 1.98697349e-01,
                       2.05914208e-01, 9.75040092e-02, 2.58925295e-01,
                       -3.59443091e-02, 2.44718136e-01, -1.69579812e-01,
                       1.20147970e-01, 2.68572454e-01, 1.50156666e-01,
                       4.84609644e-01, 2.08189327e-01, -5.76586328e-02,
                       2.38638657e-02, -1.13711093e-01, 4.86469999e-01,
                       -6.43567836e-02, -2.06237772e-01],
                      [-2.29315378e-01, 1.44260722e-01, 1.49378970e-01,
                       2.52723472e-01, -2.73898866e-02, 2.36707090e-01,
                       -2.00638871e-01, 9.19501311e-02, -2.75145016e-01,
                       -1.39165267e-01, 6.41684963e-02, -3.14309507e-01,
                       -2.86193935e-01, -3.30301420e-01, -4.42319843e-01,
                       -1.13890489e-01, 2.07765480e-03, -1.38702569e-01,
                       -3.41647725e-01, 3.68680186e-02],
                      [-2.27004115e-01, 1.83542799e-01, 8.48212284e-02,
                       2.65079765e-01, -1.55333564e-01, 1.25459870e-01,
                       -2.75613309e-01, -1.35725436e-01, -1.49146759e-01,
                       -2.85417286e-01, -3.99169708e-01, 1.74679517e-01,
                       -1.71186515e-01, 3.97511534e-01, 3.62671811e-01,
                       -1.88009057e-01, 1.27850559e-01, 6.76436291e-02,
                       3.36667289e-02, 1.82362079e-01],
                      [-2.24147659e-01, 2.21408067e-01, 6.02231879e-03,
                       2.34681396e-01, -2.55173841e-01, -4.99470070e-02,
                       -2.02045125e-01, -2.87034840e-01, 1.36413298e-01,
                       -9.30394919e-02, 9.58631470e-02, -1.74628694e-01,
                       3.69298879e-01, -1.70606523e-01, 5.39650821e-02,
                       3.54541478e-01, -2.97125313e-01, -2.95501871e-01,
                       3.42692461e-01, 2.66855373e-02],
                      [-2.20767163e-01, 2.57579395e-01, -8.58072050e-02,
                       1.54324281e-01, -2.90281478e-01, -2.30663263e-01,
                       1.76438437e-02, -2.10684387e-01, 3.15670812e-01,
                       2.28027102e-01, 2.13532625e-02, 3.33791939e-01,
                       -1.87199097e-01, -1.81648876e-01, -8.92280091e-02,
                       2.27687519e-02, 3.10876464e-01, 1.60642602e-01,
                       -1.88142728e-01, -4.16752375e-01],
                      [-2.16887425e-01, 2.91801208e-01, -1.89267880e-01,
                       1.80827215e-02, -2.19966326e-01, -3.20250225e-01,
                       2.77298249e-01, 1.15532864e-01, 9.51399665e-02,
                       2.60388460e-01, 1.34926522e-01, -2.98464216e-01,
                       -7.93229609e-03, 2.64476169e-01, -7.05477960e-02,
                       -3.01971583e-01, -1.70197579e-01, 1.06442936e-01,
                       -7.30550644e-02, 4.41051543e-01],
                      [-2.12536586e-01, 3.23842468e-01, -3.02798180e-01,
                       -1.78544537e-01, -1.05573598e-03, -1.83142306e-01,
                       3.23551463e-01, 3.97674954e-01, -4.03335658e-01,
                       -3.41670271e-01, -1.25538235e-01, 1.21419250e-01,
                       3.62611830e-02, -1.24987052e-01, 7.74852949e-02,
                       1.89687833e-01, 4.78371828e-02, -1.16123068e-01,
                       8.72297239e-02, -1.94400231e-01],
                      [-2.07745796e-01, 3.53499224e-01, -4.24704118e-01,
                       -4.38526581e-01, 4.10421088e-01, 3.54696800e-01,
                       -2.85306096e-01, -2.14315901e-01, 1.50476117e-01,
                       9.55355874e-02, 3.01805869e-02, -1.89910515e-02,
                       -8.89460114e-03, 2.14410599e-02, -1.85617415e-02,
                       -3.75430663e-02, -5.45720255e-03, 2.78969926e-02,
                       -2.01904240e-02, 3.26267090e-02]])
        )
        np.testing.assert_almost_equal(
            kk[1],
            np.array([1.83679678e+01, 1.57226237e+00, 5.83837377e-02, 1.36268266e-03,
                      2.30991559e-05, 3.04177680e-07, 3.23145016e-09, 2.83381200e-11,
                      2.08149707e-13, 1.27735148e-15, 2.50546185e-16, 1.67741842e-16,
                      1.40236481e-16, 9.78305508e-17, 6.32294021e-17, 4.19375304e-17,
                      3.74066368e-17, 3.12159770e-17, 1.98017174e-17, 1.38376694e-17])
        )

        np.testing.assert_almost_equal(
            kk[2],
            np.array([[-0.2077458, -0.21253659, -0.21688742, -0.22076716, -0.22414766,
                       -0.22700411, -0.22931538, -0.2310642, -0.23223747, -0.23282632,
                       -0.23282632, -0.23223747, -0.2310642, -0.22931538, -0.22700411,
                       -0.22414766, -0.22076716, -0.21688742, -0.21253659, -0.2077458],
                      [-0.35349922, -0.32384247, -0.29180121, -0.25757939, -0.22140807,
                       -0.1835428, -0.14426072, -0.10385716, -0.06264195, -0.02093547,
                       0.02093547, 0.06264195, 0.10385716, 0.14426072, 0.1835428,
                       0.22140807, 0.25757939, 0.29180121, 0.32384247, 0.35349922],
                      [-0.42470412, -0.30279818, -0.18926788, -0.0858072, 0.00602232,
                       0.08482123, 0.14937897, 0.19869735, 0.23201001, 0.24879751,
                       0.24879751, 0.23201001, 0.19869735, 0.14937897, 0.08482123,
                       0.00602232, -0.0858072, -0.18926788, -0.30279818, -0.42470412],
                      [0.43852658, 0.17854454, -0.01808272, -0.15432428, -0.2346814,
                       -0.26507976, -0.25272347, -0.20591421, -0.13384044, -0.0463422,
                       0.0463422, 0.13384044, 0.20591421, 0.25272347, 0.26507976,
                       0.2346814, 0.15432428, 0.01808272, -0.17854454, -0.43852658],
                      [0.41042109, -0.00105574, -0.21996633, -0.29028148, -0.25517384,
                       -0.15533356, -0.02738989, 0.09750401, 0.19487119, 0.24785212,
                       0.24785212, 0.19487119, 0.09750401, -0.02738989, -0.15533356,
                       -0.25517384, -0.29028148, -0.21996633, -0.00105574, 0.41042109],
                      [-0.3546968, 0.18314231, 0.32025023, 0.23066326, 0.04994701,
                       -0.12545987, -0.23670709, -0.25892529, -0.19577302, -0.07244872,
                       0.07244872, 0.19577302, 0.25892529, 0.23670709, 0.12545987,
                       -0.04994701, -0.23066326, -0.32025023, -0.18314231, 0.3546968],
                      [-0.2853061, 0.32355148, 0.27729823, 0.01764386, -0.20204514,
                       -0.2756133, -0.20063892, -0.03594428, 0.13675481, 0.24428368,
                       0.24428365, 0.1367548, -0.03594434, -0.20063891, -0.27561327,
                       -0.20204509, 0.01764384, 0.27729823, 0.32355145, -0.28530609],
                      [0.21431629, -0.39767568, -0.11553366, 0.21068629, 0.2870346,
                       0.13572467, -0.09194787, -0.24472108, -0.2430603, -0.09977042,
                       0.09977179, 0.24305657, 0.24472172, 0.09195302, -0.13572777,
                       -0.28703635, -0.21068478, 0.11553353, 0.39767582, -0.21431641],
                      [0.15050979, -0.40352422, 0.09550264, 0.3154507, 0.13640236,
                       -0.14941301, -0.27463812, -0.16962604, 0.06040535, 0.23887409,
                       0.23899712, 0.06040722, -0.16950586, -0.27484944, -0.14938464,
                       0.13641897, 0.31563022, 0.09525851, -0.40340336, 0.15048796],
                      [-0.09823207, 0.35503381, -0.28129892, -0.22469036, 0.10896079,
                       0.28518116, 0.12260137, -0.10726981, -0.32147545, -0.15808811,
                       0.16075458, 0.32795726, 0.11424999, -0.16857865, -0.25750771,
                       -0.10087266, 0.23727235, 0.24460211, -0.3322095, 0.09360981],
                      [0.05032393, -0.23010173, 0.29017025, 0.09760863, -0.28077051,
                       -0.24398518, 0.30061428, 0.26489603, -0.06452987, -0.2101119,
                       -0.24567425, 0.10810049, 0.31202781, 0.15029365, -0.44866164,
                       0.0956641, -0.0481157, 0.24811557, -0.18832063, 0.04245667],
                      [0.01549762, -0.10841756, 0.29727625, -0.39335616, 0.27040749,
                       -0.20776369, 0.32141654, -0.27802659, 0.13642451, -0.17648692,
                       0.18449089, -0.16592692, 0.36208749, -0.40197757, 0.09225227,
                       0.06170084, 0.07464316, -0.14404867, 0.07210019, -0.01229315],
                      [0.0216311, -0.09586963, 0.09305442, 0.17599598, -0.39185062,
                       0.10796132, 0.24254513, -0.21991255, 0.2646336, -0.36661166,
                       0.04009641, 0.31406494, -0.23194085, 0.02228008, 0.14332905,
                       -0.32948443, 0.37141779, -0.21893078, 0.06553256, -0.00794184],
                      [0.01125609, -0.08861691, 0.26711699, -0.35215627, 0.08304963,
                       0.29312265, -0.31155358, 0.11212051, -0.02198142, 0.00202485,
                       -0.04121941, 0.08438469, -0.05096357, 0.20759584, -0.43944241,
                       0.19004198, 0.31269486, -0.41733714, 0.19228711, -0.03242449],
                      [-0.01883737, 0.07467897, -0.05861398, -0.1107113, 0.15443992,
                       -0.00505078, 0.19761474, -0.60373465, 0.39000866, 0.15994591,
                       -0.17344901, -0.02705277, -0.17525876, 0.41131052, -0.27773873,
                       0.10067809, -0.13446971, 0.16923336, -0.09077617, 0.01778304],
                      [0.00306016, -0.01955881, 0.01034007, 0.17493436, -0.48093734,
                       0.38491632, 0.16019839, -0.24461942, -0.18951878, 0.07325417,
                       0.41656003, -0.35216484, 0.0874835, -0.0410465, -0.14441806,
                       0.32046984, -0.15171097, -0.0621303, 0.07121258, -0.01632441],
                      [-0.0025309, 0.01491356, -0.02571007, -0.01631912, 0.07365214,
                       0.06062228, -0.30240844, 0.14247689, 0.31275391, -0.40762651,
                       0.35492964, -0.45712523, 0.15402126, 0.2955034, -0.06288251,
                       -0.29563434, 0.07642346, 0.21028462, -0.15953874, 0.0341947],
                      [0.03302216, -0.19153524, 0.40688843, -0.31933408, -0.05277152,
                       0.09866682, 0.15790266, -0.01634339, -0.38131874, 0.32361413,
                       0.07763813, -0.1368291, -0.21047218, 0.24730162, 0.21768207,
                       -0.40471486, 0.05619326, 0.20536906, -0.13904006, 0.02808083],
                      [0.01330707, -0.07434674, 0.1640741, -0.17601905, 0.09966413,
                       -0.05496571, 0.00477538, 0.12104608, -0.01966449, -0.38902541,
                       0.36282006, 0.288918, -0.4972182, 0.02834714, 0.06560865,
                       0.32273737, -0.4027942, 0.15208733, -0.00212404, -0.00722747],
                      [0.01750219, -0.10485528, 0.23013136, -0.16200192, -0.19656005,
                       0.4842784, -0.33731099, -0.08931874, 0.29052167, -0.00818688,
                       -0.31158999, 0.15565469, 0.18959906, -0.28819379, 0.19323482,
                       0.01392894, -0.24431804, 0.27410116, -0.12994371, 0.02332712]])
        )

        test = self.random.random(size=10)
        np.testing.assert_almost_equal(
            test,
            np.array([0.39564827, 0.77171848, 0.25120318, 0.65576077,
                      0.96039715, 0.00355476,
                      0.72336104, 0.10899503, 0.54378749, 0.62691602])
        )

        np.testing.assert_almost_equal(
            self.coefficients.data_matrix[0, ..., 0],
            np.array([
                [4.93663563e-01, 4.78010146e-01, 4.63788522e-01,
                    4.50928237e-01, 4.39314629e-01, 4.28798261e-01,
                    4.19192312e-01, 4.10280148e-01, 4.01813089e-01,
                    3.93515764e-01, 3.85089077e-01, 3.76209900e-01,
                    3.66535004e-01, 3.55705856e-01, 3.43348716e-01,
                    3.29083247e-01, 3.12524641e-01, 2.93292495e-01,
                    2.71019709e-01, 2.45359953e-01],
                [5.31535010e-01, 5.17720140e-01, 5.04907227e-01,
                    4.93003500e-01, 4.81882668e-01, 4.71390399e-01,
                    4.61342759e-01, 4.51534164e-01, 4.41733815e-01,
                    4.31691405e-01, 4.21136776e-01, 4.09782265e-01,
                    3.97324811e-01, 3.83448921e-01, 3.67826456e-01,
                    3.50123751e-01, 3.30004632e-01, 3.07136237e-01,
                    2.81197769e-01, 2.51887492e-01],
                [5.61268157e-01, 5.49413977e-01, 5.38156769e-01,
                    5.27383042e-01, 5.16954232e-01, 5.06709032e-01,
                    4.96466435e-01, 4.86028192e-01, 4.75180833e-01,
                    4.63695845e-01, 4.51331706e-01, 4.37835185e-01,
                    4.22940282e-01, 4.06372937e-01, 3.87849145e-01,
                    3.67081529e-01, 3.43779743e-01, 3.17658698e-01,
                    2.88441954e-01, 2.55873009e-01],
                [5.82214282e-01, 5.72443820e-01, 5.62899224e-01,
                    5.53445283e-01, 5.43927740e-01, 5.34178785e-01,
                    5.24016376e-01, 5.13250432e-01, 5.01678997e-01,
                    4.89095545e-01, 4.75283435e-01, 4.60020810e-01,
                    4.43078173e-01, 4.24219504e-01, 4.03203927e-01,
                    3.79785535e-01, 3.53720408e-01, 3.24767458e-01,
                    2.92695286e-01, 2.57289404e-01],
                [5.93890073e-01, 5.86327635e-01, 5.78658665e-01,
                    5.70723768e-01, 5.62353524e-01, 5.53368146e-01,
                    5.43585005e-01, 5.32816681e-01, 5.20874443e-01,
                    5.07566358e-01, 4.92700607e-01, 4.76083195e-01,
                    4.57516183e-01, 4.36799910e-01, 4.13732435e-01,
                    3.88109758e-01, 3.59729121e-01, 3.28392005e-01,
                    2.93909255e-01, 2.56107758e-01],
                [5.95979512e-01, 5.90749572e-01, 5.85121442e-01,
                    5.78911820e-01, 5.71931019e-01, 5.63990198e-01,
                    5.54899635e-01, 5.44473706e-01, 5.32530642e-01,
                    5.18894359e-01, 5.03391058e-01, 4.85850840e-01,
                    4.66105368e-01, 4.43987537e-01, 4.19330529e-01,
                    3.91967867e-01, 3.61737266e-01, 3.28478056e-01,
                    2.92041731e-01, 2.52293795e-01],
                [5.88331159e-01, 5.85553166e-01, 5.82129597e-01,
                    5.77850567e-01, 5.72507449e-01, 5.65895238e-01,
                    5.57817817e-01, 5.48087161e-01, 5.36525668e-01,
                    5.22967184e-01, 5.07253137e-01, 4.89235017e-01,
                    4.68768294e-01, 4.45715658e-01, 4.19940279e-01,
                    3.91310913e-01, 3.59699908e-01, 3.24984279e-01,
                    2.87052173e-01, 2.45804580e-01],
                [5.70945355e-01, 5.70732608e-01, 5.69672008e-01,
                    5.67526575e-01, 5.64064529e-01, 5.59064647e-01,
                    5.52320762e-01, 5.43637511e-01, 5.32839843e-01,
                    5.19766631e-01, 5.04271253e-01, 4.86220453e-01,
                    4.65490596e-01, 4.41967813e-01, 4.15543684e-01,
                    3.86116938e-01, 3.53590594e-01, 3.17876843e-01,
                    2.78895404e-01, 2.36583668e-01],
                [5.43965927e-01, 5.46421980e-01, 5.47873568e-01,
                    5.48054218e-01, 5.46709103e-01, 5.43597425e-01,
                    5.38497473e-01, 5.31207983e-01, 5.21548846e-01,
                    5.09360115e-01, 4.94503082e-01, 4.76855471e-01,
                    4.56310745e-01, 4.32772489e-01, 4.06157107e-01,
                    3.76387702e-01, 3.43396592e-01, 3.07124177e-01,
                    2.67522260e-01, 2.24557489e-01],
                [5.07663154e-01, 5.12878825e-01, 5.16978529e-01,
                    5.19665633e-01, 5.20659115e-01, 5.19696420e-01,
                    5.16538243e-01, 5.10971363e-01, 5.02808400e-01,
                    4.91887178e-01, 4.78071524e-01, 4.61245444e-01,
                    4.41312805e-01, 4.18194086e-01, 3.91822409e-01,
                    3.62143509e-01, 3.29112722e-01, 2.92696484e-01,
                    2.52874094e-01, 2.09640776e-01],
                [4.62417185e-01, 4.70469373e-01, 4.77336768e-01,
                    4.82693233e-01, 4.86227716e-01, 4.87654065e-01,
                    4.86713876e-01, 4.83176946e-01, 4.76844995e-01,
                    4.67549900e-01, 4.55151684e-01, 4.39538412e-01,
                    4.20619758e-01, 3.98325863e-01, 3.72603904e-01,
                    3.43417253e-01, 3.10739459e-01, 2.74560952e-01,
                    2.34883811e-01, 1.91729340e-01],
                [4.08701273e-01, 4.19648971e-01, 4.29385830e-01,
                    4.37551868e-01, 4.43806630e-01, 4.47838242e-01,
                    4.49364099e-01, 4.48135656e-01, 4.43940027e-01,
                    4.36597506e-01, 4.25962501e-01, 4.11919873e-01,
                    3.94380971e-01, 3.73282426e-01, 3.48580043e-01,
                    3.20249019e-01, 2.88280822e-01, 2.52682487e-01,
                    2.13477046e-01, 1.70708405e-01],
                [3.47064514e-01, 3.60948529e-01, 3.73633162e-01,
                    3.84724533e-01, 3.93852096e-01, 4.00674175e-01,
                    4.04883237e-01, 4.06209018e-01, 4.04418871e-01,
                    3.99319584e-01, 3.90754458e-01, 3.78600793e-01,
                    3.62768890e-01, 3.43194737e-01, 3.19839536e-01,
                    2.92687753e-01, 2.61741537e-01, 2.27022588e-01,
                    1.88571803e-01, 1.46452555e-01],
                [2.78115147e-01, 2.94954322e-01, 3.10640282e-01,
                    3.24745523e-01, 3.36866989e-01, 3.46632733e-01,
                    3.53706943e-01, 3.57793827e-01, 3.58640294e-01,
                    3.56033094e-01, 3.49802162e-01, 3.39813697e-01,
                    3.25970385e-01, 3.08204815e-01, 2.86481038e-01,
                    2.60784909e-01, 2.31127858e-01, 1.97542609e-01,
                    1.60085349e-01, 1.18834923e-01],
                [2.02505870e-01, 2.22295616e-01, 2.41010390e-01,
                    2.58188053e-01, 2.73391887e-01, 2.86217460e-01,
                    2.96299516e-01, 3.03314572e-01, 3.06984085e-01,
                    3.07075180e-01, 3.03397257e-01, 2.95802774e-01,
                    2.84183751e-01, 2.68466045e-01, 2.48607812e-01,
                    2.24598277e-01, 1.96451275e-01, 1.64208453e-01,
                    1.27936293e-01, 8.77289872e-02],
                [1.20919279e-01, 1.43631393e-01, 1.65374150e-01,
                    1.85650125e-01, 2.03989120e-01, 2.19952959e-01,
                    2.33145175e-01, 2.43211654e-01, 2.49848567e-01,
                    2.52796354e-01, 2.51843737e-01, 2.46825811e-01,
                    2.37618011e-01, 2.24136868e-01, 2.06333636e-01,
                    1.84192432e-01, 1.57730629e-01, 1.26992827e-01,
                    9.20536943e-02, 5.30199705e-02],
                [3.40581354e-02, 5.96384941e-02, 8.43785197e-02,
                    1.07746837e-01, 1.29237742e-01, 1.48379055e-01,
                    1.64741413e-01, 1.77940510e-01, 1.87641263e-01,
                    1.93558170e-01, 1.95456087e-01, 1.93147244e-01,
                    1.86491192e-01, 1.75388591e-01, 1.59780096e-01,
                    1.39645886e-01, 1.14997927e-01, 8.58838546e-02,
                    5.23841084e-02, 1.46146099e-02],
                [-5.73636876e-02, -2.89952105e-02, -1.31777107e-03,
                    2.51021740e-02, 4.97245150e-02, 7.20431501e-02,
                    9.15945992e-02, 1.07961645e-01, 1.20778708e-01,
                    1.29730922e-01, 1.34556570e-01, 1.35044553e-01,
                    1.31031788e-01, 1.22403703e-01, 1.09086975e-01,
                    9.10515217e-02, 6.83044338e-02, 4.08921161e-02,
                    8.89870469e-03, -2.75528458e-02],
                [-1.52626004e-01, -1.21575121e-01, -9.10514034e-02,
                    -6.16531260e-02, -3.39560582e-02, -8.50001123e-03,
                    1.42172550e-02, 3.37460153e-02, 4.96871596e-02,
                    6.16958027e-02, 6.94813559e-02, 7.28063083e-02,
                    7.14858605e-02, 6.53839428e-02, 5.44120992e-02,
                    3.85273779e-02, 1.77287890e-02, -7.93995107e-03,
                    -3.83950945e-02, -7.35085564e-02],
                [-2.51007663e-01, -2.17405703e-01, -1.84154945e-01,
                    -1.51885874e-01, -1.21206316e-01, -9.26905561e-02,
                    -6.68699310e-02, -4.42281214e-02, -2.51976265e-02,
                    -1.01544938e-02, 5.80976532e-04, 6.74184827e-03,
                    8.11965928e-03, 4.55584966e-03, -4.05706483e-03,
                    -1.77762916e-02, -3.66129300e-02, -6.05304857e-02,
                    -8.94449365e-02, -1.23227367e-01],
            ]),
        )

        self.create_model()

    def create_model(self) -> None:
        """Create a functional response according to historical model."""
        integral_body = (
            self.X.data_matrix[..., 0, np.newaxis]
            * self.coefficients.data_matrix[..., 0]
        )
        integral_matrix = cumtrapz(
            integral_body,
            x=self.X.grid_points[0],
            initial=0,
            axis=1,
        )
        integral = np.diagonal(integral_matrix, axis1=1, axis2=2)
        self.y = FDataGrid(self.intercept.data_matrix[..., 0] + integral)

    def test_historical(self) -> None:
        """Test historical regression with data following the model."""
        regression = HistoricalLinearRegression(n_intervals=6)
        regression.fit(self.X, self.y)
        np.testing.assert_allclose(
            regression.predict(self.X).data_matrix,
            self.y.data_matrix,
            atol=1e-1,
            rtol=0,
        )

        np.testing.assert_allclose(
            regression.intercept_.data_matrix,
            self.intercept.data_matrix,
            rtol=1e-2,
        )

        np.testing.assert_allclose(
            regression.coef_.data_matrix[0, ..., 0],
            np.triu(self.coefficients.data_matrix[0, ..., 0]),
            atol=0.2,
            rtol=0,
        )


if __name__ == '__main__':
    print()
    unittest.main()
